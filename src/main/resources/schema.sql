
CREATE TABLE IF NOT EXISTS PUBLIC.RATING (
	ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
	NAME               CHARACTER VARYING (255)  NOT NULL,
	CONSTRAINT RATING_PK PRIMARY KEY ( ID ),
	CONSTRAINT RATING_UNIQUE UNIQUE ( NAME )
 );

CREATE TABLE IF NOT EXISTS PUBLIC.DIRECTOR (
  	ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
  	NAME               CHARACTER VARYING (255)  NOT NULL,
  	CONSTRAINT DIRECTOR_PK PRIMARY KEY ( ID ),
  	CONSTRAINT DIRECTOR_UNIQUE UNIQUE ( NAME )
);

CREATE TABLE IF NOT EXISTS PUBLIC.FILM (
	ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
	NAME               CHARACTER VARYING (255)  NOT NULL,
	DESCRIPTION        CHARACTER VARYING (255)  NOT NULL,
	RELEASE_DATE       DATE   NOT NULL,
	DURATION           INTEGER   NOT NULL,
	LIKE_QUANTITY      INTEGER ,
	RATING_ID          INTEGER   ,
	CONSTRAINT FILM_PKEY PRIMARY KEY ( ID )
 );

CREATE INDEX IF NOT EXISTS FKI_FILM_RATING_ID_FKEY ON PUBLIC.FILM ( RATING_ID );

ALTER TABLE PUBLIC.FILM ADD CONSTRAINT IF NOT EXISTS fk_film_rating FOREIGN KEY ( RATING_ID ) REFERENCES PUBLIC.RATING( ID ) ON DELETE SET NULL ON UPDATE CASCADE;

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_X_DIRECTOR (
	FILM_ID            INTEGER   NOT NULL,
	DIRECTOR_ID           INTEGER   NOT NULL,
	CONSTRAINT FILM_X_DIRECTOR_PK PRIMARY KEY ( FILM_ID, DIRECTOR_ID )
 );

 ALTER TABLE PUBLIC.FILM_X_DIRECTOR ADD CONSTRAINT IF NOT EXISTS fk_film_x_director_genre FOREIGN KEY ( DIRECTOR_ID ) REFERENCES PUBLIC.DIRECTOR( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

 ALTER TABLE PUBLIC.FILM_X_DIRECTOR ADD CONSTRAINT IF NOT EXISTS fk_film_x_director_film FOREIGN KEY ( FILM_ID ) REFERENCES PUBLIC.FILM( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

CREATE TABLE IF NOT EXISTS PUBLIC.GENRE (
	ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
	NAME               CHARACTER VARYING (255)  NOT NULL,
	CONSTRAINT GENRE_PK PRIMARY KEY ( ID ),
	CONSTRAINT GENRE_UNIQUE UNIQUE ( NAME )
 );

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_X_GENRE (
	FILM_ID            INTEGER   NOT NULL,
	GENRE_ID           INTEGER   NOT NULL,
	CONSTRAINT FILM_X_GENRE_PK PRIMARY KEY ( FILM_ID, GENRE_ID )
 );

CREATE INDEX IF NOT EXISTS idx_film_x_genre_genre_id ON PUBLIC.FILM_X_GENRE ( GENRE_ID );

CREATE INDEX IF NOT EXISTS idx_film_x_genre_film_id ON PUBLIC.FILM_X_GENRE ( FILM_ID );

ALTER TABLE PUBLIC.FILM_X_GENRE ADD CONSTRAINT IF NOT EXISTS fk_film_x_genre_genre FOREIGN KEY ( GENRE_ID ) REFERENCES PUBLIC.GENRE( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE PUBLIC.FILM_X_GENRE ADD CONSTRAINT IF NOT EXISTS fk_film_x_genre_film FOREIGN KEY ( FILM_ID ) REFERENCES PUBLIC.FILM( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
	ID                   INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
	EMAIL                CHARACTER VARYING (255)  NOT NULL,
	LOGIN                CHARACTER VARYING (255)  NOT NULL,
	NAME                 CHARACTER VARYING (255)  NOT NULL,
	BIRTHDAY             DATE   NOT NULL,
	CONSTRAINT pk_user PRIMARY KEY ( ID )
 );

CREATE TABLE IF NOT EXISTS PUBLIC.LIKES (
	FILM_ID            INTEGER   NOT NULL,
	USER_ID            INTEGER   NOT NULL,
	CONSTRAINT LIKES_PK PRIMARY KEY ( FILM_ID, USER_ID )
 );

CREATE INDEX IF NOT EXISTS idx_likes_film_id ON PUBLIC.LIKES ( FILM_ID );

CREATE INDEX IF NOT EXISTS idx_likes_user_id ON PUBLIC.LIKES ( USER_ID );

ALTER TABLE PUBLIC.LIKES ADD CONSTRAINT IF NOT EXISTS fk_likes_film FOREIGN KEY ( FILM_ID ) REFERENCES PUBLIC.FILM( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE PUBLIC.LIKES ADD CONSTRAINT IF NOT EXISTS fk_likes_user FOREIGN KEY ( USER_ID ) REFERENCES PUBLIC.USERS( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDS (
	USER_ID_1            INTEGER   NOT NULL,
	USER_ID_2            INTEGER   NOT NULL,
	CONSTRAINT pk_friends PRIMARY KEY ( USER_ID_1, USER_ID_2 )
 );

CREATE INDEX IF NOT EXISTS idx_friends_user_id_2 ON PUBLIC.FRIENDS ( USER_ID_2 );

CREATE INDEX IF NOT EXISTS idx_friends_user_id_1 ON PUBLIC.FRIENDS ( USER_ID_1 );

ALTER TABLE PUBLIC.FRIENDS ADD CONSTRAINT IF NOT EXISTS fk_friends_user FOREIGN KEY ( USER_ID_1 ) REFERENCES PUBLIC.USERS( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE PUBLIC.FRIENDS ADD CONSTRAINT IF NOT EXISTS fk_friends_user_0 FOREIGN KEY ( USER_ID_2 ) REFERENCES PUBLIC.USERS( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

CREATE TABLE IF NOT EXISTS PUBLIC.EVENTS_FEED
(
    EVENT_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
    USER_ID    INTEGER                                                 NOT NULL,
    EVENT_TYPE CHARACTER VARYING(255)                                  NOT NULL,
    OPERATION  CHARACTER VARYING(255)                                  NOT NULL,
    ENTITY_ID  INTEGER                                                 NOT NULL,
    TIME_STAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT EVENTS_PK PRIMARY KEY (EVENT_ID)
);
CREATE TABLE IF NOT EXISTS reviews (
    review_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content VARCHAR NOT NULL,
    is_positive BOOLEAN NOT NULL,
    user_id INT NOT NULL,
    film_id INT NOT NULL,
    CONSTRAINT fk_reviews_user_id
        FOREIGN KEY (user_id)
        REFERENCES users
        ON DELETE CASCADE,
    CONSTRAINT fk_reviews_film_id
        FOREIGN KEY (film_id)
        REFERENCES film
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_likes (
    review_id INT NOT NULL,
    user_id INT NOT NULL,
    is_like SMALLINT NOT NULL,
    PRIMARY KEY (review_id, user_id),
    CONSTRAINT fk_review_id
        FOREIGN KEY (review_id)
        REFERENCES reviews
        ON DELETE CASCADE,
    CONSTRAINT fk_user_id
        FOREIGN KEY (user_id)
        REFERENCES users
        ON DELETE CASCADE
);





ALTER TABLE PUBLIC.EVENTS_FEED
    ADD CONSTRAINT IF NOT EXISTS fk_events_feed_user_id FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;